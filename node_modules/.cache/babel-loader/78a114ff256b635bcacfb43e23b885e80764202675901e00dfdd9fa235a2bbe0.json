{"ast":null,"code":"// src/utils/axiosInstance.js\nimport axios from 'axios';\nimport { isTokenExpired } from './auth';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    if (isTokenExpired(token)) {\n      localStorage.removeItem('token');\n      alert('토큰이 만료되었습니다. 다시 로그인해 주세요.'); // 경고창 띄우기\n      window.location.href = '/login';\n    } else {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(new error('토큰만료'));\n});\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // 401 Unauthorized 에러 처리\n    const errorCode = error.response.data.errorCode;\n    const errorMessage = error.response.data.errorMessage;\n\n    // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n    localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n    window.location.href = '/login'; // 로그인 페이지로 리다이렉트\n  }\n  return Promise.reject(error + errorMessage); // 기타 에러 처리\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","isTokenExpired","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","removeItem","alert","window","location","href","headers","Authorization","error","Promise","reject","response","status","errorCode","data","errorMessage"],"sources":["/Users/kimsubong/Desktop/hello/src/utils/axiosInstance.js"],"sourcesContent":["// src/utils/axiosInstance.js\nimport axios from 'axios';\nimport { isTokenExpired } from './auth';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080',\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      if (isTokenExpired(token)) {\n        localStorage.removeItem('token');\n        alert('토큰이 만료되었습니다. 다시 로그인해 주세요.'); // 경고창 띄우기\n        window.location.href = '/login';\n      } else {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(new error('토큰만료'));\n  }\n);\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n        // 401 Unauthorized 에러 처리\n        const errorCode = error.response.data.errorCode;\n        const errorMessage = error.response.data.errorMessage;\n  \n        // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n        localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n        window.location.href = '/login'; // 로그인 페이지로 리다이렉트\n      }\n      return Promise.reject(error + errorMessage); // 기타 에러 처리\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,QAAQ;AAEvC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT,IAAIR,cAAc,CAACQ,KAAK,CAAC,EAAE;MACzBC,YAAY,CAACE,UAAU,CAAC,OAAO,CAAC;MAChCC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;MACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC,CAAC,MAAM;MACLR,MAAM,CAACS,OAAO,CAACC,aAAa,GAAG,UAAUT,KAAK,EAAE;IAClD;EACF;EACA,OAAOD,MAAM;AACf,CAAC,EACAW,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIF,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1C,CACF,CAAC;;AAED;AACAjB,aAAa,CAACG,YAAY,CAACiB,QAAQ,CAACf,GAAG,CACpCe,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD;IACA,MAAMC,SAAS,GAAGL,KAAK,CAACG,QAAQ,CAACG,IAAI,CAACD,SAAS;IAC/C,MAAME,YAAY,GAAGP,KAAK,CAACG,QAAQ,CAACG,IAAI,CAACC,YAAY;;IAErD;IACAhB,YAAY,CAACE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACnC;EACA,OAAOI,OAAO,CAACC,MAAM,CAACF,KAAK,GAAGO,YAAY,CAAC,CAAC,CAAC;AACjD,CACF,CAAC;AAED,eAAexB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}