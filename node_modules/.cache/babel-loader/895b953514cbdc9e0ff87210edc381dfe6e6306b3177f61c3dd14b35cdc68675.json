{"ast":null,"code":"// src/utils/axiosInstance.js\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // 401 Unauthorized 에러 처리\n    const errorCode = error.response.data.errorCode;\n    const errorMessage = error.response.data.errorMessage;\n\n    // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n    localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n    window.location.href = '/login'; // 로그인 페이지로 리다이렉트\n  }\n  return Promise.reject(error); // 기타 에러 처리\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","errorCode","data","errorMessage","removeItem","window","location","href"],"sources":["/Users/kimsubong/Desktop/hello/src/utils/axiosInstance.js"],"sourcesContent":["// src/utils/axiosInstance.js\nimport axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080',\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n);\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n        // 401 Unauthorized 에러 처리\n        const errorCode = error.response.data.errorCode;\n        const errorMessage = error.response.data.errorMessage;\n  \n        // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n        localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n        window.location.href = '/login'; // 로그인 페이지로 리다이렉트\n      }\n      return Promise.reject(error); // 기타 에러 처리\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACN,CAAC;;AAED;AACAZ,aAAa,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CACpCU,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD;IACA,MAAMC,SAAS,GAAGL,KAAK,CAACG,QAAQ,CAACG,IAAI,CAACD,SAAS;IAC/C,MAAME,YAAY,GAAGP,KAAK,CAACG,QAAQ,CAACG,IAAI,CAACC,YAAY;;IAErD;IACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACnC;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAClC,CACF,CAAC;AAED,eAAeZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}