{"ast":null,"code":"// src/utils/axiosInstance.js\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  var _error$response, _error$response$data, _error$response2, _error$response2$data;\n  const errorCode = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errorCode;\n  const errorMessage = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errorMessage;\n  if (errorCode && errorMessage) {\n    alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n  }\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n    const errorCode = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.errorCode;\n    const errorMessage = (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.errorMessage;\n    if (errorCode && errorMessage) {\n      alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n    }\n\n    // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n    localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n    window.location.href = '/';\n  }\n  return Promise.reject(error); // 기타 에러 처리\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","_error$response","_error$response$data","_error$response2","_error$response2$data","errorCode","response","data","errorMessage","alert","Promise","reject","status","_error$response3","_error$response3$data","_error$response4","_error$response4$data","removeItem","window","location","href"],"sources":["/Users/kimsubong/Desktop/hello/src/utils/axiosInstance.js"],"sourcesContent":["// src/utils/axiosInstance.js\nimport axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080',\n});\n\n// 요청 인터셉터 추가\naxiosInstance.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        const errorCode = error.response?.data?.errorCode;\n        const errorMessage = error.response?.data?.errorMessage;\n        if (errorCode && errorMessage) {\n          alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n        }\n        return Promise.reject(error);\n      }\n);\n\n// 응답 인터셉터 추가\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      const errorCode = error.response?.data?.errorCode;\n      const errorMessage = error.response?.data?.errorMessage;\n      if (errorCode && errorMessage) {\n        alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n      }\n  \n        // alert(`Error Code: ${errorCode}\\nError Message: ${errorMessage}`);\n        localStorage.removeItem('token'); // 로컬 스토리지에서 토큰 제거\n        window.location.href = '/';\n      }\n      return Promise.reject(error); // 기타 에러 처리\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;EACT,MAAMC,SAAS,IAAAJ,eAAA,GAAGD,KAAK,CAACM,QAAQ,cAAAL,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBM,IAAI,cAAAL,oBAAA,uBAApBA,oBAAA,CAAsBG,SAAS;EACjD,MAAMG,YAAY,IAAAL,gBAAA,GAAGH,KAAK,CAACM,QAAQ,cAAAH,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBI,IAAI,cAAAH,qBAAA,uBAApBA,qBAAA,CAAsBI,YAAY;EACvD,IAAIH,SAAS,IAAIG,YAAY,EAAE;IAC7BC,KAAK,CAAC,eAAeJ,SAAS,oBAAoBG,YAAY,EAAE,CAAC;EACnE;EACA,OAAOE,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAC9B,CACN,CAAC;;AAED;AACAZ,aAAa,CAACG,YAAY,CAACe,QAAQ,CAACb,GAAG,CACpCa,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAN,KAAK,IAAK;EACT,IAAIA,KAAK,CAACM,QAAQ,IAAIN,KAAK,CAACM,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;IAAA,IAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACnD,MAAMX,SAAS,IAAAQ,gBAAA,GAAGb,KAAK,CAACM,QAAQ,cAAAO,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBN,IAAI,cAAAO,qBAAA,uBAApBA,qBAAA,CAAsBT,SAAS;IACjD,MAAMG,YAAY,IAAAO,gBAAA,GAAGf,KAAK,CAACM,QAAQ,cAAAS,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBR,YAAY;IACvD,IAAIH,SAAS,IAAIG,YAAY,EAAE;MAC7BC,KAAK,CAAC,eAAeJ,SAAS,oBAAoBG,YAAY,EAAE,CAAC;IACnE;;IAEE;IACAZ,YAAY,CAACqB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B;EACA,OAAOV,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC;AAClC,CACF,CAAC;AAED,eAAeZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}